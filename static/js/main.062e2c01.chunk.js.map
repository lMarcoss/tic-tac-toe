{"version":3,"sources":["logo.svg","components/game/square/square.tsx","components/game/board/calculate-winner.tsx","components/game/board/board.tsx","components/game/game.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Square","props","value","onClick","className","calculateWinner","squares","lines","i","length","a","b","c","Board","status","useState","Array","fill","setSquares","xIsNext","setXIsNext","winner","handleClick","index","newSquares","slice","Game","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAAe,G,KAAA,IAA0B,kC,sBCO1B,SAASA,EAAQC,GAAc,IAEtCC,EAAkBD,EAAlBC,MAAOC,EAAWF,EAAXE,QACd,OACC,wBAAQC,UAAU,SAASD,QAASA,EAApC,SACED,ICZG,SAASG,EAAgBC,GAW/B,IAVA,IAAMC,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAECC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACpBD,EAAMC,GADc,GAC/BE,EAD+B,KAC5BC,EAD4B,KACzBC,EADyB,KAEtC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACrE,OAAON,EAAQI,GAGjB,OAAO,KCbR,IAmDeG,EAnDD,WAAO,IAMhBC,EANe,EAEWC,mBAAmBC,MAAM,GAAGC,KAAK,KAF5C,mBAEZX,EAFY,KAEHY,EAFG,OAGWH,oBAAkB,GAH7B,mBAGZI,EAHY,KAGHC,EAHG,KAKbC,EAAShB,EAAgBC,GAQ/B,SAASgB,EAAYC,GACpB,IAAIC,EAAalB,EAAQmB,QAGrBpB,EAAgBC,IAAYA,EAAQiB,KAKxCC,EAAWD,GAASJ,EAAU,IAAM,IACpCD,EAAWM,GACXJ,GAAYD,IAGb,OAnBCL,EADGO,EACM,WAAaA,EAEb,iBAAmBF,EAAU,IAAM,KAoB5C,gCACC,qBAAKf,UAAU,SAAf,SAAyBU,IACzB,sBAAKV,UAAU,YAAf,UACC,cAACJ,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,MACrD,cAACtB,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,MACrD,cAACtB,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,SAEtD,sBAAKlB,UAAU,YAAf,UACC,cAACJ,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,MACrD,cAACtB,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,MACrD,cAACtB,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,SAEtD,sBAAKlB,UAAU,YAAf,UACC,cAACJ,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,MACrD,cAACtB,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,MACrD,cAACtB,EAAD,CAAQE,MAAOI,EAAQ,GAAIH,QAAS,WAAKmB,EAAY,aClC1CI,EAZF,WAEZ,OACC,qBAAKtB,UAAU,OAAf,SACC,qBAAKA,UAAU,aAAf,SACC,cAAC,EAAD,SCQWuB,MAXf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKwB,IAAKC,EAAMzB,UAAU,WAAW0B,IAAI,SACzC,cAAC,EAAD,UCIOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.062e2c01.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {MouseEventHandler} from \"react\";\n\ntype Props = {\n\tvalue: string,\n\tonClick: MouseEventHandler\n}\n\nexport default function Square (props:Props) {\n\n\tconst {value, onClick} = props;\n\treturn (\n\t\t<button className=\"square\" onClick={onClick}>\n\t\t\t{value}\n\t\t</button>\n\t);\n}","export function calculateWinner(squares: string[]) {\n\tconst lines = [\n\t\t[0, 1, 2],\n\t\t[3, 4, 5],\n\t\t[6, 7, 8],\n\t\t[0, 3, 6],\n\t\t[1, 4, 7],\n\t\t[2, 5, 8],\n\t\t[0, 4, 8],\n\t\t[2, 4, 6],\n\t];\n\tfor (let i = 0; i < lines.length; i++) {\n\t\tconst [a, b, c] = lines[i];\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\t\t\treturn squares[a];\n\t\t}\n\t}\n\treturn null;\n}","import Square from \"../square/square\";\nimport React, {useState} from \"react\";\nimport {calculateWinner} from \"./calculate-winner\";\n\nconst Board = () => {\n\n\tconst [squares, setSquares] = useState<string[]>(Array(9).fill(''));\n\tconst [xIsNext, setXIsNext] = useState<boolean>(true);\n\n\tconst winner = calculateWinner(squares);\n\tlet status;\n\tif (winner) {\n\t\tstatus = 'Winner: ' + winner;\n\t} else {\n\t\tstatus = 'Next player: ' + (xIsNext ? 'X' : 'O');\n\t}\n\n\tfunction handleClick(index: number) {\n\t\tlet newSquares = squares.slice();\n\n\t\t// si hay jugador o un cuadrado ya ha sido llenado\n\t\tif (calculateWinner(squares) || squares[index]) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tnewSquares[index] = xIsNext ? 'X' : 'O';\n\t\tsetSquares(newSquares);\n\t\tsetXIsNext(!xIsNext)\n\t}\n\n\treturn (\n\n\n\t\t<div>\n\t\t\t<div className=\"status\">{status}</div>\n\t\t\t<div className=\"board-row\">\n\t\t\t\t<Square value={squares[0]} onClick={()=>{handleClick(0)}}/>\n\t\t\t\t<Square value={squares[1]} onClick={()=>{handleClick(1)}}/>\n\t\t\t\t<Square value={squares[2]} onClick={()=>{handleClick(2)}}/>\n\t\t\t</div>\n\t\t\t<div className=\"board-row\">\n\t\t\t\t<Square value={squares[3]} onClick={()=>{handleClick(3)}}/>\n\t\t\t\t<Square value={squares[4]} onClick={()=>{handleClick(4)}}/>\n\t\t\t\t<Square value={squares[5]} onClick={()=>{handleClick(5)}}/>\n\t\t\t</div>\n\t\t\t<div className=\"board-row\">\n\t\t\t\t<Square value={squares[6]} onClick={()=>{handleClick(6)}}/>\n\t\t\t\t<Square value={squares[7]} onClick={()=>{handleClick(7)}}/>\n\t\t\t\t<Square value={squares[8]} onClick={()=>{handleClick(8)}}/>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\nexport default Board;","import Board from \"./board/board\";\nimport React from \"react\";\n\nconst Game = () => {\n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board/>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from \"./components/game/game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Game/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}